name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: Build_Push

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

  test:
    name: Run Backend Unit Tests
    runs-on: ubuntu-latest
    environment: Deployment
    needs: build_and_push

    defaults:
      run:
        working-directory: ./backend

    env:
      DATABASE_URI: ${{ secrets.DATABASE_URI }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  deploy:
    name: Deploy Backend to EC2
    runs-on: self-hosted
    environment: Deployment
    needs: [build_and_push, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull latest image and restart backend container
        run: |
          mkdir -p ~/app
          cp -r $PWD/backend/docker-compose.yml ~/app/
          cd ~/app
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          export DATABASE_URI=${{ secrets.DATABASE_URI }}
          export FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          export GH_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}
          export GH_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }}
          export EMAIL_USER=${{ secrets.EMAIL_USER }}
          export EMAIL_APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          export CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          export CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          
          docker-compose down || true
          docker system prune -af || true
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          docker-compose up -d
